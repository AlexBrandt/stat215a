# plot a scree plot
ggplot(aes(x = component, y = prop_var)) +
geom_bar(stat = "identity") +
geom_text(aes(x = component, y = prop_var - 0.02,
label = paste0(round(100 * prop_var), "%")),
col = "white") +
theme_classic(base_size = 18) +
ylab("Proportion of variability explained") +
xlab("Principal component") +
ggtitle("Scree plot")
pc1_data <- t(heptathlon_eigen$vectors %*% t(heptathlon_trans))
cor(heptathlon$score, pc1_data)
pc1_data <- t(heptathlon_eigen$vectors %*% t(heptathlon_trans))
pc1_data
cor(heptathlon$score, pc1_data)
cor(scale(heptathlon$score), pc1_data)
pc1_data <- t(t(heptathlon_eigen$vectors) %*% t(heptathlon_trans))
cor(heptathlon$score, pc1_data)
pc1_data <- heptathlon_trans %*% heptathlon_eigen$vectors
heptathlon_eigen$vectors
heptathlon_trans
pc1_data <- as.matrix(heptathlon_trans) %*% heptathlon_eigen$vectors
cor(heptathlon$score, pc1_data)
pc1_data
cor(heptathlon$score, pc1_data)
cor(heptathlon, pc1_data)
heptathlon_eigen$vectors
heptathlon_prcomp$x[,1]
data.frame(heptathlon_prcomp$x[,1], pc1_data[, 1])
pc1_data <- as.matrix(scale(heptathlon_trans)) %*% heptathlon_eigen$vectors
cor(heptathlon, pc1_data)
cor(heptathlon$score, pc1_data)
cor(score, heptathlon_prcomp$x[,1])
pc1_data <- as.matrix(scale(heptathlon_trans)) %*% heptathlon_eigen$vectors
pc1_data
cor(heptathlon$score, pc1_data)
data.frame(prop_var = cumsum(heptathlon_eigen$values),
component = 1:ncol(heptathlon_trans)) %>%
# plot a scree plot
ggplot(aes(x = component, y = prop_var)) +
geom_bar(stat = "identity") +
geom_text(aes(x = component, y = prop_var - 0.02,
label = paste0(round(100 * prop_var), "%")),
col = "white") +
theme_classic(base_size = 18) +
ylab("Proportion of variability explained") +
xlab("Principal component") +
ggtitle("Scree plot")
data.frame(prop_var = cumsum(heptathlon_eigen$values),
component = 1:ncol(heptathlon_trans)) %>%
# plot a scree plot
ggplot(aes(x = component, y = prop_var)) +
geom_bar(stat = "identity") +
geom_text(aes(x = component, y = prop_var - 0.02,
label = paste0(round(100 * prop_var), "%")),
col = "white") +
theme_classic(base_size = 18) +
ylab("Cumulative prop of variability explained") +
xlab("Principal component") +
ggtitle("Scree plot")
data.frame(prop_var = cumsum(heptathlon_eigen$values),
component = 1:ncol(heptathlon_trans))
data.frame(prop_var = cumsum(heptathlon_eigen$values) / sum(heptathlon_eigen$values),
component = 1:ncol(heptathlon_trans)) %>%
# plot a scree plot
ggplot(aes(x = component, y = prop_var)) +
geom_bar(stat = "identity") +
geom_text(aes(x = component, y = prop_var - 0.02,
label = paste0(round(100 * prop_var), "%")),
col = "white") +
theme_classic(base_size = 18) +
ylab("Cumulative prop of variability explained") +
xlab("Principal component")
data.frame(prop_var = cumsum(heptathlon_eigen$values) / sum(heptathlon_eigen$values),
component = 1:ncol(heptathlon_trans)) %>%
# plot a scree plot
ggplot(aes(x = component, y = prop_var)) +
geom_bar(stat = "identity") +
geom_text(aes(x = component, y = prop_var - 0.05,
label = paste0(round(100 * prop_var), "%")),
col = "white") +
theme_classic() +
ylab("Cumulative prop of variability explained") +
xlab("Principal component")
data.frame(prop_var = cumsum(heptathlon_eigen$values) / sum(heptathlon_eigen$values),
component = 1:ncol(heptathlon_trans)) %>%
# plot a scree plot
ggplot(aes(x = component, y = prop_var)) +
geom_bar(stat = "identity") +
geom_text(aes(x = component, y = prop_var - 0.05,
label = paste0(round(100 * prop_var), "%")),
col = "white") +
theme_classic() +
ylab("Cumulative prop of variability explained") +
xlab("Principal component") +
scale_x_discrete(breaks = 1:7)
data.frame(prop_var = cumsum(heptathlon_eigen$values) / sum(heptathlon_eigen$values),
component = 1:ncol(heptathlon_trans)) %>%
# plot a scree plot
ggplot(aes(x = component, y = prop_var)) +
geom_bar(stat = "identity") +
geom_text(aes(x = component, y = prop_var - 0.05,
label = paste0(round(100 * prop_var), "%")),
col = "white") +
theme_classic() +
ylab("Cumulative prop of variability explained") +
xlab("Principal component") +
scale_x_continuous(breaks = 1:7)
heptathlon_rotated
heptathlon_rotated <- as.matrix(scale(heptathlon_trans)) %*% heptathlon_eigen$vectors
heptathlon_rotated
heptathlon_rotated <- as.data.frame(heptathlon_rotated)
paste0("PC", 1:7)
colnames(heptathlon_rotated) <- paste0("PC", 1:7)
heptathlon
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2)) +
geom_text(aes(x = PC1, y = PC2, label = athlete),
data = cbind(heptathlon_rotated, athlete = rownames(heptathlon)))
heptathlon_rotated <- rbind(heptathlon_rotated,
score = heptathlon$score,
athlete = rownames(heptathlon))
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2, size = score)) +
geom_text(aes(x = PC1, y = PC2, label = athlete), hjust = 1)
heptathlon_rotated
heptathlon_rotated <- cbind(heptathlon_rotated,
score = heptathlon$score,
athlete = rownames(heptathlon))
heptathlon_rotated <- as.matrix(scale(heptathlon_trans)) %*% heptathlon_eigen$vectors
cor(heptathlon$score, heptathlon_rotated[, 1])
heptathlon_rotated <- as.data.frame(heptathlon_rotated)
colnames(heptathlon_rotated) <- paste0("PC", 1:7)
heptathlon_rotated <- cbind(heptathlon_rotated,
score = heptathlon$score,
athlete = rownames(heptathlon))
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2, size = score)) +
geom_text(aes(x = PC1, y = PC2, label = athlete), hjust = 1)
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2, size = score)) +
geom_text(aes(x = PC1, y = PC2, label = athlete), hjust = 1) +
theme_classic()
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2, size = score)) +
ggrepel::geom_text_repel(aes(x = PC1, y = PC2, label = athlete)) +
theme_classic()
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2, size = order(score))) +
ggrepel::geom_text_repel(aes(x = PC1, y = PC2, label = athlete)) +
theme_classic()
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2, size = order(score, decreasing = TRUE))) +
ggrepel::geom_text_repel(aes(x = PC1, y = PC2, label = athlete)) +
theme_classic()
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2, size = order(score, decreasing = TRUE))) +
ggrepel::geom_text_repel(aes(x = PC1, y = PC2, label = athlete), alpha = 0.5) +
theme_classic()
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2, size = order(score, decreasing = TRUE)),
col = "grey50") +
ggrepel::geom_text_repel(aes(x = PC1, y = PC2, label = athlete), alpha = 0.5) +
theme_classic()
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2, size = order(score)),
col = "grey50") +
ggrepel::geom_text_repel(aes(x = PC1, y = PC2, label = athlete), alpha = 0.5) +
theme_classic()
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2, size = order(score)),
col = "grey50") +
ggrepel::geom_text_repel(aes(x = PC1, y = PC2, label = athlete),
alpha = 0.7) +
theme_classic() +
scale_size_manual(name = "ranking")
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2, size = order(score)),
col = "grey50") +
ggrepel::geom_text_repel(aes(x = PC1, y = PC2, label = athlete),
alpha = 0.7) +
theme_classic() +
scale_size_continuous(name = "ranking")
dim(heptathlon)
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2, size = order(score)),
col = "grey50") +
ggrepel::geom_text_repel(aes(x = PC1, y = PC2, label = athlete),
alpha = 0.7) +
theme_classic() +
scale_size_continuous(name = "ranking", breaks = c(1, 25))
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2, size = order(score)),
col = "grey50") +
ggrepel::geom_text_repel(aes(x = PC1, y = PC2, label = athlete),
alpha = 0.7) +
theme_classic() +
scale_size_continuous(name = "ranking", breaks = c(1, 25), range = c(25, 1))
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2, size = order(score)),
col = "grey50") +
ggrepel::geom_text_repel(aes(x = PC1, y = PC2, label = athlete),
alpha = 0.7) +
theme_classic() +
scale_size_continuous(name = "ranking", breaks = c(1, 25), limits = c(25, 1))
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2, size = order(score)),
col = "grey50") +
ggrepel::geom_text_repel(aes(x = PC1, y = PC2, label = athlete),
alpha = 0.7) +
theme_classic() +
scale_size_continuous(name = "ranking", breaks = c(1, 25), labels = c(1, 25))
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2, size = order(score)),
col = "grey50") +
ggrepel::geom_text_repel(aes(x = PC1, y = PC2, label = athlete),
alpha = 0.7) +
theme_classic() +
scale_size_continuous(name = "ranking", breaks = c(1, 25), labels = c(25, 1))
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2, size = order(score)),
col = "grey50") +
ggrepel::geom_text_repel(aes(x = PC1, y = PC2, label = athlete),
alpha = 0.7) +
theme_classic() +
scale_size_continuous(name = "ranking",
breaks = c(5, 10, 15, 20, 25),
labels = c(25, 20, 15, 10, 5))
heptathlon$score
heptathlon[, 7]
heptathlon[, 8]
heptathlon %>% arrange(score)
colnames(heptathlon)
ggplot(heptathlon) +
geom_point(aes(x = hurdles, y = javelin, size = order(score)),
col = "grey50") +
theme_classic() +
scale_size_continuous(name = "judge ranking",
breaks = c(5, 10, 15, 20, 25),
labels = c(25, 20, 15, 10, 5))
ggplot(heptathlon) +
geom_point(aes(x = hurdles, y = run800m, size = order(score)),
col = "grey50") +
theme_classic() +
scale_size_continuous(name = "judge ranking",
breaks = c(5, 10, 15, 20, 25),
labels = c(25, 20, 15, 10, 5))
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2, size = order(score)),
col = "grey50") +
ggrepel::geom_text_repel(aes(x = PC1, y = PC2, label = athlete),
alpha = 0.7) +
theme_classic() +
scale_size_continuous(name = "judge ranking",
breaks = c(5, 10, 15, 20, 25),
labels = c("best", "", "", "", "worst"))
prcomp
data.frame(eigenvalue = prcomp$sdev^2,
component = 1:10) %>%
ggplot() + geom_point(aes(x = component, y = eigenvalue))
data.frame(eigenvalue = prcomp$sdev^2,
component = 1:10) %>%
ggplot() +
geom_point(aes(x = component, y = eigenvalue)) +
geom_line(aes(x = component, y = eigenvalue)) +
theme_classic()
data.frame(eigenvalue = prcomp$sdev^2,
component = 1:10) %>%
ggplot() +
geom_point(aes(x = component, y = eigenvalue)) +
geom_line(aes(x = component, y = eigenvalue)) +
theme_classic() +
scale_x_continuous(breaks = 1:10)
data.frame(eigenvalue = prcomp$sdev^2,
component = 1:10,
elbow = component == 4) %>%
ggplot() +
geom_point(aes(x = component, y = eigenvalue, col = elbow, size = elbow)) +
geom_line(aes(x = component, y = eigenvalue)) +
theme_classic() +
scale_x_continuous(breaks = 1:10)
data.frame(eigenvalue = prcomp$sdev^2,
component = 1:10,
elbow = (component == 4)) %>%
ggplot() +
geom_point(aes(x = component, y = eigenvalue, col = elbow, size = elbow)) +
geom_line(aes(x = component, y = eigenvalue)) +
theme_classic() +
scale_x_continuous(breaks = 1:10)
data.frame(eigenvalue = prcomp$sdev^2,
component = 1:10) %>%
mutate(elbow = (component == 4)) %>%
ggplot() +
geom_point(aes(x = component, y = eigenvalue, col = elbow, size = elbow)) +
geom_line(aes(x = component, y = eigenvalue)) +
theme_classic() +
scale_x_continuous(breaks = 1:10)
data.frame(eigenvalue = prcomp$sdev^2,
component = 1:10) %>%
mutate(elbow = (component == 4)) %>%
ggplot() +
geom_point(aes(x = component, y = eigenvalue, col = elbow, size = elbow)) +
geom_line(aes(x = component, y = eigenvalue)) +
theme_classic() +
scale_x_continuous(breaks = 1:10) +
scale_color_manual(values = c("grey50", "orange"))
data.frame(eigenvalue = prcomp$sdev^2,
component = 1:10) %>%
mutate(elbow = (component == 4)) %>%
ggplot() +
geom_point(aes(x = component, y = eigenvalue, col = elbow, size = elbow)) +
geom_line(aes(x = component, y = eigenvalue)) +
theme_classic() +
scale_x_continuous(breaks = 1:10) +
scale_color_manual(values = c("grey50", "red4"))
data.frame(eigenvalue = prcomp$sdev^2,
component = 1:10) %>%
mutate(elbow = (component == 4)) %>%
ggplot() +
geom_line(aes(x = component, y = eigenvalue)) +
geom_point(aes(x = component, y = eigenvalue, col = elbow, size = elbow)) +
theme_classic() +
scale_x_continuous(breaks = 1:10) +
scale_color_manual(values = c("grey50", "red4"))
data.frame(eigenvalue = prcomp$sdev^2,
component = 1:10) %>%
mutate(elbow = (component == 4)) %>%
ggplot() +
geom_line(aes(x = component, y = eigenvalue)) +
geom_point(aes(x = component, y = eigenvalue, col = elbow, size = elbow)) +
theme_classic() +
scale_x_continuous(breaks = 1:10) +
scale_color_manual(values = c("grey20", "red4"))
data.frame(eigenvalue = prcomp$sdev^2,
component = 1:10) %>%
mutate(elbow = (component == 4)) %>%
ggplot() +
geom_line(aes(x = component, y = eigenvalue)) +
geom_point(aes(x = component, y = eigenvalue, col = elbow, size = elbow)) +
theme_classic() +
scale_x_continuous(breaks = 1:10) +
scale_color_manual(values = c("grey20", "red4")) +
theme(legend.position = "none")
p <- 10     # The dimension of each observation (number of variables).
m <- 4      # The number of off-diagonal covariance terms in each direction.
cov_sparse <- GetCov(p, m, max.cov = 0.8, sparse = T)
GetCov <- function(p, m, max.cov = .5, sparse = T) {
# Generate a covariance matrix with limited off-diagonal elements.
#
# Args:
#   p: dimensionality of the cov mat
#   m: number non-zero elements in each direction off the diagonal
#   max.cov: maximum covariance between variables
#   sparse: whether to use sparse data structure (Matrix vs matrix)
#
# Returns:
#   A matrix with nonzeros close to the diagonal and zeros everywhere else
#   Each row will look like
#       0 0 0 0 0 .1 .2 ... .9 1 .9  ... .2 .1 0 0 0 0 0
# generate a sequence of covariances from 0 to max.cov
r <- seq(from = max.cov, to = 0, length.out = m + 1)
# remove the last element (0)
r <- r[-length(r)]
# generate an empty covariance matrix
# (defined as a sparse matrix if specified)
if (sparse) {
mat <- Matrix(0, nrow = p, ncol = p, sparse = T)
} else {
mat <- matrix(0, nrow = p,ncol = p)
}
# fill in the lower diagonal of the covariance marix with covariance values
for (i in 1:length(r)) {
# identify the off-diagnoal matrix indices
index <- seq(from = i + 1, by = p + 1, length.out = p - i )
# fill in all lower off-diagonal indices with current covariance value
mat[index] <- r[i]
}
# fill in the upper off-diagonals of the matrix
mat <- mat + t(mat)
# fill in the diagonal with 1s
diag(mat) <- 1
return(mat)
}
cov_dense <- GetCov(p, m, max.cov = 0.8, sparse = F)
cov_dense
cov_dense
cov_sparse <- GetCov(p, m, max.cov = 0.8, sparse = T)
cov_sparse
library(Matrix)
library(irlba)
library(microbenchmark)
library(tidyverse)
library(GGally)
cov_sparse <- GetCov(p, m, max.cov = 0.8, sparse = T)
cov_sparse
chol(cov_dense)
chol(cov_dense)
microbenchmark(t(chol(cov_dense)), unit = "ms")
microbenchmark(t(chol(cov_sparse)), unit = "ms")
cov_sparse
microbenchmark(t(chol(cov_sparse)), unit = "ms")
microbenchmark(t(chol(cov_dense)), unit = "ms")
?chol
microbenchmark(chol(cov_dense), unit = "ms")
microbenchmark(chol(cov_sparse), unit = "ms")
L <- t(chol(cov_sparse))
L
L
matrix(rnorm(n * p), nrow = p, ncol = n)
n <- 100000
matrix(rnorm(n * p), nrow = p, ncol = n)
X <- L %*% matrix(rnorm(n * p), nrow = p, ncol = n)
X <- t(X)
dim(X)
X_scaled <- scale(X, center=TRUE, scale=TRUE)
round(cov(X_scaled), 1)
round(cov(X_scaled), 2)
X_sample <- as.data.frame(X_scaled) %>%
sample_n(50)
GGally::ggpairs(X_sample)
round(cov(X), 1)
round(cov(as.matrix(X)), 1)
microbenchmark(
prcomp <- prcomp(X_scaled, center=FALSE, scale=FALSE),
times=1, unit="ms")
microbenchmark(
eigen <- eigen(cov(X_scaled)),
times=1, unit="ms")
microbenchmark(
svd <- svd(X_scaled / sqrt(nrow(X_scaled) - 1), nu=5, nv=5),
times=1, unit="ms")
microbenchmark(
irlba <- irlba(X_scaled / sqrt(nrow(X_scaled) - 1), nu = 5, nv = 5),
times=1, unit="ms")
data.frame(eigen = eigen$values,
prcomp = prcomp$sdev^2,
svd = svd$d^2,
irlba = irlba$d^2) %>%
round(2)
data.frame(eigen = eigen$vectors[,1],
prcomp = prcomp$rotation[,1],
svd = svd$v[,1],
irlba = irlba$v[,1]) %>%
round(2) %>% head
data.frame(eigenvalue = prcomp$sdev^2,
component = 1:10) %>%
mutate(elbow = (component == 4)) %>%
ggplot() +
geom_line(aes(x = component, y = eigenvalue)) +
geom_point(aes(x = component, y = eigenvalue, col = elbow, size = elbow)) +
theme_classic() +
scale_x_continuous(breaks = 1:10) +
scale_color_manual(values = c("grey20", "red4")) +
theme(legend.position = "none")
data.frame(eigenvalue = prcomp$sdev^2,
component = 1:10) %>%
mutate(elbow = (component == 4)) %>%
mutate(cum_prop_var = cumsum(eigenvalue) / sum(eigenvalue))
data.frame(eigenvalue = prcomp$sdev^2,
component = 1:10) %>%
mutate(elbow = (component == 4)) %>%
mutate(cum_prop_var = cumsum(eigenvalue) / sum(eigenvalue)) %>%
ggplot() +
geom_line(aes(x = component, y = cum_prop_var)) +
geom_point(aes(x = component, y = cum_prop_var, col = elbow, size = elbow)) +
theme_classic() +
scale_x_continuous(breaks = 1:10) +
scale_color_manual(values = c("grey20", "red4")) +
theme(legend.position = "none")
data("heptathlon", package = "HSAUR")
heptathlon_trans <- heptathlon %>%
mutate(hurdles = max(hurdles) - hurdles,
run200m = max(run200m) - run200m,
run800m = max(run800m) - run800m) %>%
# remove the score from our transformed dataset
select(-score)
heptathlon_cov <- cov(scale(heptathlon_trans))
heptathlon_eigen <- eigen(heptathlon_cov)
data.frame(prop_var = cumsum(heptathlon_eigen$values) / sum(heptathlon_eigen$values),
component = 1:ncol(heptathlon_trans)) %>%
# plot a scree plot
ggplot(aes(x = component, y = prop_var)) +
geom_bar(stat = "identity") +
geom_text(aes(x = component, y = prop_var - 0.05,
label = paste0(round(100 * prop_var), "%")),
col = "white") +
theme_classic() +
ylab("Cumulative prop of variability explained") +
xlab("Principal component") +
scale_x_continuous(breaks = 1:7)
heptathlon_rotated <- as.matrix(scale(heptathlon_trans)) %*% heptathlon_eigen$vectors
cor(heptathlon$score, heptathlon_rotated[, 1])
heptathlon_rotated <- as.data.frame(heptathlon_rotated)
colnames(heptathlon_rotated) <- paste0("PC", 1:7)
heptathlon_rotated <- cbind(heptathlon_rotated,
score = heptathlon$score,
athlete = rownames(heptathlon))
ggplot(heptathlon_rotated) +
geom_point(aes(x = PC1, y = PC2, size = order(score)),
col = "grey50") +
ggrepel::geom_text_repel(aes(x = PC1, y = PC2, label = athlete),
alpha = 0.7) +
theme_classic() +
scale_size_continuous(name = "judge ranking",
breaks = c(5, 10, 15, 20, 25),
labels = c("worst", "", "", "", "best"))
setwd("~/Google Drive/PhD/Teaching/STAT215A/labs/lab1_peer_review/25928461")
dates.orig <- loadDatesData(path = "data/")
source("R/load.R")
source("R/clean.R")
dates.orig <- loadDatesData(path = "data/")
dates <- cleanDatesData(dates.orig)
